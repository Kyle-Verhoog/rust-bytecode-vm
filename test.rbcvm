function box(value) {
    return [value];
}

function unbox(box) {
    return box[0];
}

function box_set(box, new_value) {
    box[0] = new_value;
}

function array_find(array, func) {
    let len = array_length(array);
    for let i = 0; i < len; i = i + 1 {
        if func(array[i], i, array) {
            return array[i];
        }
    }
    return null;
}

function array_foreach(array, func) {
    let len = array_length(array);
    for let i = 0; i < len; i = i + 1 {
        func(array[i], i, array);
    }
}

function array_contains(array, thing) {
    return null != array_find(array, function(i) {
        return i == thing;
    });
}

function ll_new() {
    return box(null);
}

function ll_length(list) {
    let current = unbox(list);
    let len = 0;

    while current {
        len = len + 1;
        current = current[1];
    }

    return len;
}

function ll_prepend(list, value) {
    let current = unbox(list);
    box_set(list, [value, current]);
}

function ll_append(list, value) {
    let current = unbox(list);
    let prev = null;
    if current == null {
        box_set(list, [value, null]);
        return;
    }

    while current {
        prev = current;
        current = current[1];
    }

    prev[1] = [value, null];
}

function ll_foreach(list, fn) {
    let current = unbox(list);

    let i = 0;
    while current {
        fn(current[0], i);
        current = current[1];
        i = i + 1;
    }
}

function ll_find(list, fn) {
    let current = unbox(list);

    while current {
        if fn(current[0]) {
            return current;
        }
    }

    return null;
}

function ll_reverse(list) {
    let new_list = ll_new();
    ll_foreach(list, function(i) {
        ll_prepend(new_list, i);
    });
    return new_list;
}

function ll_to_array(list) {
    let arr = array_new(ll_length(list));
    ll_foreach(list, function(elem, i) {
        arr[i] = elem;
    });
    return arr;
}

let DA_INITIAL_SIZE = 16;

function da_new() {
    return [0, array_new(DA_INITIAL_SIZE)];
}

function da_push(dynarray, value) {
    let next_idx = dynarray[0];
    let array = dynarray[1];
    let len = array_length(array);
    if next_idx >= len {
        let new_array = array_new(2 * len);
        for let i = 0; i < next_idx; i = i + 1 {
            new_array[i] = array[i];
        }
        dynarray[1] = array = new_array;
    }
    array[next_idx] = value;
    dynarray[0] = next_idx + 1;
}

function da_pop(dynarray) {
    if dynarray[0] <= 0 {
        return null;
    }
    dynarray[0] = dynarray[0] - 1;
    return dynarray[1][dynarray[0]];
}

function da_foreach(dynarray, func) {
    let next_idx = dynarray[0];
    let array = dynarray[1];

    for let i = 0; i < next_idx; i = i + 1 {
        func(array[i], i, array);
    }
}

function da_indexof(dynarray, func) {
    let next_idx = dynarray[0];
    let array = dynarray[1];

    for let i = 0; i < next_idx; i = i + 1 {
        if func(array[i], i, array) {
            return i;
        }
    }

    return -1;
}

function da_find(dynarray, func) {
    let idx = da_indexof(dynarray, func);
    if idx >= 0 {
        return da_get(dynarray, idx);
    }
    return null;
}

function da_set(dynarray, n, value) {
    dynarray[1][n] = value;
}

function da_get(dynarray, n) {
    return dynarray[1][n];
}

function da_length(dynarray) {
    return dynarray[0];
}

function da_to_array(dynarray) {
    let len = dynarray[0];
    let array = array_new(len);
    for let i = 0; i < len; i = i + 1 {
        array[i] = dynarray[1][i];
    }
    return array;
}

function al_new() {
    return da_new();
}

function al_set(list, key, value) {
    let found = da_find(list, function(x, i) {
        if x[0] == key {
            return true;
        }
    });

    if found == null {
        da_push(list, [key, value]);
    } else {
        found[1] = value;
    }
}

function al_get(list, key) {
    let found = da_find(list, function(x) {
        if x[0] == key {
            return true;
        }
    });

    if found != null {
        return found[1];
    }
    return null;
}

let FNV_OFFSET_BASIS_32 = 2166136261;
let FNV_PRIME_32 = 16777619;

function fnv1a(bytes) {
    let len = array_length(bytes);
    let hash = FNV_OFFSET_BASIS_32;

    for let i = 0; i < len; i = i + 1 {
        hash = hash ^ bytes[i];
        hash = hash * FNV_PRIME_32;
    }

    return hash;
}

function to_bytes(v) {
    let t = typeof(v);
    if t == "string" {
        return string_bytes(v);
    }
    if t == "integer" {
        return [v];
    }
}

let HM_INITIAL_CAPACITY = 2 ** 3;
let HM_LOAD_FACTOR = 0.7;

let HM_CAP = 0;
let HM_LOAD = 1;
let HM_FUNC = 2;
let HM_BUCKETS = 3;

function hm_new(func) {
    return [
        HM_INITIAL_CAPACITY,
        0,
        func,
        array_new(HM_INITIAL_CAPACITY),
    ];
}

function hm_string() {
    return hm_new(function(key) {
        return fnv1a(string_bytes(key));
    });
}

function hm_integer() {
    return hm_new(function(key) {
        return fnv1a([key]);
    });
}

function hm_hash(hm, key) {
    return hm[HM_FUNC](key) & hm[HM_CAP] - 1;
}

function hm_grow(hm) {
    hm[HM_CAP] = hm[HM_CAP] * 2;
    let old_buckets = hm[HM_BUCKETS];
    hm[HM_BUCKETS] = array_new(hm[HM_CAP]);
    hm[HM_LOAD] = 0;
    let len = array_length(oldbuckets);

    let bucket;
    for let i = 0; i < len; i = i + 1 {
        bucket = oldbuckets[i];
        da_foreach(bucket, function(entry) {
            hm_set(hm, entry[0], entry[1]);
        });
    }
}

function hm_get(hm, key) {
    let hashed = hm_hash(hm, key);
    let bucket = hm[HM_BUCKETS][hashed];

    if bucket == null {
        return null;
    }

    let entry = da_find(bucket, function(entry) {
        return entry[0] == key;
    });

    if entry == null {
        return null;
    }
    return entry[1];
}

function hm_set(hm, key, value) {
    let hashed = hm_hash(hm, key);
    let bucket = hm[HM_BUCKETS][hashed];

    if bucket == null {
        bucket = da_new();
        hm[HM_LOAD] = hm[HM_LOAD] + 1;
        hm[HM_BUCKETS][hashed] = bucket;
    }

    let entry = da_find(bucket, function(entry) {
        return entry[0] == key;
    });

    if entry {
        entry[1] = value;
        return;
    }

    da_push(bucket, [key, value]);
    if hm[HM_LOAD] / hm[HM_CAP] < HM_LOAD_FACTOR {
        hm_grow(hm);
    }
}

function hm_delete(hm, key) {
    let hashed = hm_hash(hm, key);
    let bucket = hm[HM_BUCKETS][hashed];
    if !bucket {
        return false;
    }

    let len = da_length(bucket);
    let idx = da_indexof(bucket, function(entry) {
        return entry[0] == key;
    });

    if i != -1 {
        for let i = idx + 1; i < len; i = i + 1 {
            bucket[i - 1] = bucket[i];
        }
        if da_length(bucket) == 0 {
            hm[HM_BUCKETS][hashed] = null;
            hm[HM_LOAD] = hm[HM_LOAD] - 1;
        }
        return true;
    }
    return false;
}

function tape_new() {
    let arr = da_new();
    da_push(arr, 0);
    return [0, arr];
}

function tape_get(tape) {
    return da_get(tape[1], tape[0]);
}

function tape_get_char(tape) {
    return chr(tape_get(tape));
}

function tape_inc(tape) {
    let reel = tape[1];
    let idx = tape[0];
    da_set(reel, idx, 1 + da_get(reel, idx));
}

function tape_dec(tape) {
    let reel = tape[1];
    let idx = tape[0];
    da_set(reel, idx, da_get(reel, idx) - 1);
}

function tape_advance(tape) {
    tape[0] = tape[0] + 1;
    if da_length(tape[1]) <= tape[0] {
        da_push(tape[1], 0);
    }
}

function tape_devance(tape) {
    if tape[0] > 0 {
        tape[0] = tape[0] - 1;
    }
}

function bf_parse(program) {
    let code = da_new();
    let bracket_map = hm_integer();
    let left_stack = da_new();
    let pc = 0;

    let chars = string_chars(program);
    let len = array_length(chars);
    let c;
    let left;
    for let i = 0; i < len; i = i + 1 {
        c = chars[i];

        if c == "[" {
            da_push(left_stack, pc);
        } else if c == "]" {
            left = da_pop(left_stack);
            if left != null {
                hm_set(bracket_map, left, pc);
                hm_set(bracket_map, pc, left);
            }
        } else if array_contains(string_chars("+-.,<>"), c) {
        } else {
            continue;
        }

        da_push(code, c);
        pc = pc + 1;
    }

    return [da_to_array(code), bracket_map];
}

function bf_run(program) {
    let code = program[0];
    let bracket_map = program[1];
    let tape = tape_new();
    let len = array_length(code);
    let pc = 0;

    let op;
    while pc < len {
        op = code[pc];
        if op == "+" {
            tape_inc(tape);
        } else if op == "-" {
            tape_dec(tape);
        } else if op == ">" {
            tape_advance(tape);
        } else if op == "<" {
            tape_devance(tape);
        } else if op == "[" {
            if tape_get(tape) == 0 {
                pc = hm_get(bracket_map, pc);
            }
        } else if op == "]" {
            if tape_get(tape) != 0 {
                pc = hm_get(bracket_map, pc);
            }
        } else if op == "." {
            print(tape_get_char(tape));
        }

        pc = pc + 1;
    }
}

let prog = "
 Benchmark brainf*ck program
>++[<+++++++++++++>-]<[[>+>+<<-]>[<+>-]++++++++
[>++++++++<-]>.[-]<<>++++++++++[>++++++++++[>++
++++++++[>++++++++++[>++++++++++[>++++++++++[>+
+++++++++[-]<-]<-]<-]<-]<-]<-]<-]++++++++++.
";

let hello = "
[ This program prints \"Hello World!\" and a newline to the screen, its
  length is 106 active command characters. [It is not the shortest.]

  This loop is an \"initial comment loop\", a simple way of adding a comment
  to a BF program such that you don't have to worry about any command
  characters. Any '.', ',', '+', '-', '<' and '>' characters are simply
  ignored, the '[' and ']' characters just have to be balanced. This
  loop and the commands it contains are ignored because the current cell
  defaults to a value of 0; the 0 value causes this loop to be skipped.
]
++++++++               Set Cell #0 to 8
[
    >++++               Add 4 to Cell #1; this will always set Cell #1 to 4
    [                   as the cell will be cleared by the loop
        >++             Add 2 to Cell #2
        >+++            Add 3 to Cell #3
        >+++            Add 3 to Cell #4
        >+              Add 1 to Cell #5
        <<<<-           Decrement the loop counter in Cell #1
    ]                   Loop till Cell #1 is zero; number of iterations is 4
    >+                  Add 1 to Cell #2
    >+                  Add 1 to Cell #3
    >-                  Subtract 1 from Cell #4
    >>+                 Add 1 to Cell #6
    [<]                 Move back to the first zero cell you find; this will
                        be Cell #1 which was cleared by the previous loop
    <-                  Decrement the loop Counter in Cell #0
]                       Loop till Cell #0 is zero; number of iterations is 8

The result of this is:
Cell No :   0   1   2   3   4   5   6
Contents:   0   0  72 104  88  32   8
Pointer :   ^

>>.                     Cell #2 has value 72 which is 'H'
>---.                   Subtract 3 from Cell #3 to get 101 which is 'e'
+++++++..+++.           Likewise for 'llo' from Cell #3
>>.                     Cell #5 is 32 for the space
<-.                     Subtract 1 from Cell #4 for 87 to give a 'W'
<.                      Cell #3 was set to 'o' from the end of 'Hello'
+++.------.--------.    Cell #3 for 'rl' and 'd'
>>+.                    Add 1 to Cell #5 gives us an exclamation point
>++.                    And finally a newline from Cell #6
";

let parsed = bf_parse(prog);
bf_run(parsed);
