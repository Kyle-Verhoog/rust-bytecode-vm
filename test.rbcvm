module Test;

import "lib/array.rbcvm";
import "lib/arraylist.rbcvm";
import "lib/hash.rbcvm";
import "lib/hashmap.rbcvm";
import "lib/string.rbcvm";

function tape_new() {
    let arr = ArrayList.new();
    ArrayList.push(arr, 0);
    return [0, arr];
}

function tape_get(tape) {
    return ArrayList.get(tape[1], tape[0]);
}

function tape_get_char(tape) {
    return chr(tape_get(tape));
}

function tape_inc(tape) {
    let reel = tape[1];
    let idx = tape[0];
    ArrayList.set(reel, idx, 1 + ArrayList.get(reel, idx));
}

function tape_dec(tape) {
    let reel = tape[1];
    let idx = tape[0];
    ArrayList.set(reel, idx, ArrayList.get(reel, idx) - 1);
}

function tape_advance(tape) {
    tape[0] = tape[0] + 1;
    if ArrayList.length(tape[1]) <= tape[0] {
        ArrayList.push(tape[1], 0);
    }
}

function tape_devance(tape) {
    if tape[0] > 0 {
        tape[0] = tape[0] - 1;
    }
}

function hash_int(key) {
  return Hash.fnv1a([key]);
}

function bf_parse(program) {
    let code = ArrayList.new();
    let bracket_map = HashMap.new();
    HashMap.set_hash_function(bracket_map, hash_int);
    let left_stack = ArrayList.new();
    let pc = 0;

    let chars = String.chars(program);
    let len = Array.length(chars);
    let c;
    let left;
    for let i = 0; i < len; i = i + 1 {
        c = chars[i];

        if c == "[" {
            ArrayList.push(left_stack, pc);
        } else if c == "]" {
            left = ArrayList.pop(left_stack);
            if left != null {
                HashMap.set(bracket_map, left, pc);
                HashMap.set(bracket_map, pc, left);
            }
        } else if Array.contains(String.chars("+-.,<>"), c) {
        } else {
            continue;
        }

        ArrayList.push(code, c);
        pc = pc + 1;
    }

    return [ArrayList.to_array(code), bracket_map];
}

function bf_run(program) {
    let code = program[0];
    let bracket_map = program[1];
    let tape = tape_new();
    let len = Array.length(code);
    let pc = 0;

    let op;
    while pc < len {
        op = code[pc];
        if op == "+" {
            tape_inc(tape);
        } else if op == "-" {
            tape_dec(tape);
        } else if op == ">" {
            tape_advance(tape);
        } else if op == "<" {
            tape_devance(tape);
        } else if op == "[" {
            if tape_get(tape) == 0 {
                pc = HashMap.get(bracket_map, pc);
            }
        } else if op == "]" {
            if tape_get(tape) != 0 {
                pc = HashMap.get(bracket_map, pc);
            }
        } else if op == "." {
            print(tape_get_char(tape));
        }

        if pc == null {
          println("pc is null!!!!");
        }
        pc = pc + 1;
    }
}

let prog = "
 Benchmark brainf*ck program
>++[<+++++++++++++>-]<[[>+>+<<-]>[<+>-]++++++++
[>++++++++<-]>.[-]<<>++++++++++[>++++++++++[>++
++++++++[>++++++++++[>++++++++++[>++++++++++[>+
+++++++++[-]<-]<-]<-]<-]<-]<-]<-]++++++++++.
";

let hello = "
[ This program prints \"Hello World!\" and a newline to the screen, its
  length is 106 active command characters. [It is not the shortest.]

  This loop is an \"initial comment loop\", a simple way of adding a comment
  to a BF program such that you don't have to worry about any command
  characters. Any '.', ',', '+', '-', '<' and '>' characters are simply
  ignored, the '[' and ']' characters just have to be balanced. This
  loop and the commands it contains are ignored because the current cell
  defaults to a value of 0; the 0 value causes this loop to be skipped.
]
++++++++               Set Cell #0 to 8
[
    >++++               Add 4 to Cell #1; this will always set Cell #1 to 4
    [                   as the cell will be cleared by the loop
        >++             Add 2 to Cell #2
        >+++            Add 3 to Cell #3
        >+++            Add 3 to Cell #4
        >+              Add 1 to Cell #5
        <<<<-           Decrement the loop counter in Cell #1
    ]                   Loop till Cell #1 is zero; number of iterations is 4
    >+                  Add 1 to Cell #2
    >+                  Add 1 to Cell #3
    >-                  Subtract 1 from Cell #4
    >>+                 Add 1 to Cell #6
    [<]                 Move back to the first zero cell you find; this will
                        be Cell #1 which was cleared by the previous loop
    <-                  Decrement the loop Counter in Cell #0
]                       Loop till Cell #0 is zero; number of iterations is 8

The result of this is:
Cell No :   0   1   2   3   4   5   6
Contents:   0   0  72 104  88  32   8
Pointer :   ^

>>.                     Cell #2 has value 72 which is 'H'
>---.                   Subtract 3 from Cell #3 to get 101 which is 'e'
+++++++..+++.           Likewise for 'llo' from Cell #3
>>.                     Cell #5 is 32 for the space
<-.                     Subtract 1 from Cell #4 for 87 to give a 'W'
<.                      Cell #3 was set to 'o' from the end of 'Hello'
+++.------.--------.    Cell #3 for 'rl' and 'd'
>>+.                    Add 1 to Cell #5 gives us an exclamation point
>++.                    And finally a newline from Cell #6
";

let parsed = bf_parse(prog);
bf_run(parsed);
